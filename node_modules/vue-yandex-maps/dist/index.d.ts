import ymapsNamespace from 'yandex-maps';
import { MapSettings } from './types';
import { ymapLoader } from './utils';
declare global {
    const ymaps: typeof ymapsNamespace;
    interface Window {
        ymaps: typeof ymapsNamespace;
    }
}
export declare const loadYmap: typeof ymapLoader;
export declare const YandexMap: import("vue").DefineComponent<{
    coordinates: {
        type: () => number[];
        required: true;
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    bounds: {
        type: () => number[][];
        default: null;
    };
    behaviors: {
        type: () => string[];
        default: null;
    };
    controls: {
        type: () => string[];
        default: null;
    };
    detailedControls: {
        type: () => import("./types").DetailedControls;
        default: null;
    };
    events: {
        type: () => string[];
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
    mapType: {
        type: StringConstructor;
        default: string;
    };
    settings: {
        type: () => MapSettings;
        default: () => {};
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    coordinates: {
        type: () => number[];
        required: true;
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    bounds: {
        type: () => number[][];
        default: null;
    };
    behaviors: {
        type: () => string[];
        default: null;
    };
    controls: {
        type: () => string[];
        default: null;
    };
    detailedControls: {
        type: () => import("./types").DetailedControls;
        default: null;
    };
    events: {
        type: () => string[];
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
    mapType: {
        type: StringConstructor;
        default: string;
    };
    settings: {
        type: () => MapSettings;
        default: () => {};
    };
}>> & {
    [x: `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    zoom: number;
    bounds: number[][];
    behaviors: string[];
    controls: string[];
    detailedControls: import("./types").DetailedControls;
    events: string[];
    mapType: string;
    settings: MapSettings;
}>;
export declare const YandexMarker: import("vue").DefineComponent<{
    coordinates: {
        type: () => (number | import("./types").RecursiveArray)[];
        required: true;
    };
    markerId: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    properties: {
        type: ObjectConstructor;
        default: () => {};
    };
    options: {
        type: () => ymapsNamespace.IGeoObjectOptions;
        default: null;
    };
    type: {
        type: import("vue").PropType<import("./types").MarkerType>;
        default: string;
    };
    radius: {
        type: NumberConstructor;
        default: null;
    };
    events: {
        type: () => string[];
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
}, (() => false | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>) | (() => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined), unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    coordinates: {
        type: () => (number | import("./types").RecursiveArray)[];
        required: true;
    };
    markerId: {
        type: (NumberConstructor | StringConstructor)[];
        required: true;
    };
    properties: {
        type: ObjectConstructor;
        default: () => {};
    };
    options: {
        type: () => ymapsNamespace.IGeoObjectOptions;
        default: null;
    };
    type: {
        type: import("vue").PropType<import("./types").MarkerType>;
        default: string;
    };
    radius: {
        type: NumberConstructor;
        default: null;
    };
    events: {
        type: () => string[];
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
}>> & {
    [x: `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    options: ymapsNamespace.IGeoObjectOptions;
    type: import("./types").MarkerType;
    events: string[];
    properties: Record<string, any>;
    radius: number;
}>;
export declare const YandexCollection: import("vue").DefineComponent<{
    options: {
        type: ObjectConstructor;
        default: () => {};
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "geo-objects-updated"[], "geo-objects-updated", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: ObjectConstructor;
        default: () => {};
    };
}>> & {
    "onGeo-objects-updated"?: ((...args: any[]) => any) | undefined;
}, {
    options: Record<string, any>;
}>;
export declare const YandexClusterer: import("vue").DefineComponent<{
    options: {
        type: () => ymapsNamespace.IClustererOptions;
        default: () => {};
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "geo-objects-updated"[], "geo-objects-updated", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: () => ymapsNamespace.IClustererOptions;
        default: () => {};
    };
}>> & {
    "onGeo-objects-updated"?: ((...args: any[]) => any) | undefined;
}, {
    options: ymapsNamespace.IClustererOptions;
}>;
export declare const YandexObjectManager: import("vue").DefineComponent<{
    options: {
        type: () => ymapsNamespace.IObjectManagerOptions;
        default: () => {};
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "geo-objects-updated"[], "geo-objects-updated", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    options: {
        type: () => ymapsNamespace.IObjectManagerOptions;
        default: () => {};
    };
}>> & {
    "onGeo-objects-updated"?: ((...args: any[]) => any) | undefined;
}, {
    options: ymapsNamespace.IObjectManagerOptions;
}>;
declare const _default: {
    install: (app: any, options: MapSettings) => void;
};
export default _default;
