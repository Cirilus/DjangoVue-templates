import { MapSettings, DetailedControls } from './types';
declare const _default: import("vue").DefineComponent<{
    coordinates: {
        type: () => number[];
        required: true;
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    bounds: {
        type: () => number[][];
        default: null;
    };
    behaviors: {
        type: () => string[];
        default: null;
    };
    controls: {
        type: () => string[];
        default: null;
    };
    detailedControls: {
        type: () => DetailedControls;
        default: null;
    };
    events: {
        type: () => string[];
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
    mapType: {
        type: StringConstructor;
        default: string;
    };
    settings: {
        type: () => MapSettings;
        default: () => {};
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    coordinates: {
        type: () => number[];
        required: true;
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    bounds: {
        type: () => number[][];
        default: null;
    };
    behaviors: {
        type: () => string[];
        default: null;
    };
    controls: {
        type: () => string[];
        default: null;
    };
    detailedControls: {
        type: () => DetailedControls;
        default: null;
    };
    events: {
        type: () => string[];
        default: () => string[];
        validator: (val: string[]) => boolean;
    };
    mapType: {
        type: StringConstructor;
        default: string;
    };
    settings: {
        type: () => MapSettings;
        default: () => {};
    };
}>> & {
    [x: `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    zoom: number;
    bounds: number[][];
    behaviors: string[];
    controls: string[];
    detailedControls: DetailedControls;
    events: string[];
    mapType: string;
    settings: MapSettings;
}>;
export default _default;
